

PROGRAM trans_routine.


*---------------------------------------------------------------------*
*       CLASS routine DEFINITION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform DEFINITION.
  PUBLIC SECTION.

*  Attributs
    DATA:
      p_check_master_data_exist
            TYPE RSODSOCHECKONLY READ-ONLY,
*-    Instance for getting request runtime attributs;
*     Available information: Refer to methods of
*     interface 'if_rsbk_request_admintab_view'
      p_r_request
            TYPE REF TO if_rsbk_request_admintab_view READ-ONLY.

  PRIVATE SECTION.

    TYPE-POOLS: rsd, rstr.

*   Rule specific types
    TYPES:
      BEGIN OF _ty_s_SC_1,
*      InfoObject: ZDERIV_01 Derivation of Sales Channel.
        /BIC/ZDERIV_01           TYPE /BIC/OIZDERIV_01,
*      InfoObject: 0BILL_TYPE Billing Type.
        BILL_TYPE           TYPE /BI0/OIBILL_TYPE,
*      InfoObject: 0PLANT Site.
        PLANT           TYPE /BI0/OIPLANT,
*      InfoObject: ZFORG TT Business Area.
        /BIC/ZFORG           TYPE /BIC/OIZFORG,
*      InfoObject: ZSMETHOD Sales Channel.
        /BIC/ZSMETHOD           TYPE /BIC/OIZSMETHOD,
*      InfoObject: ZSC_BT Billing Type --> Sales Channel.
        /BIC/ZSC_BT           TYPE /BIC/OIZSC_BT,
*      InfoObject: ZSC_P Plant --> Sales Channel.
        /BIC/ZSC_P           TYPE /BIC/OIZSC_P,
*      InfoObject: ZSC_BA TT Business Area --> Sales Channel.
        /BIC/ZSC_BA           TYPE /BIC/OIZSC_BA,
*      InfoObject: ZUPDSTAT Update Status.
        /BIC/ZUPDSTAT           TYPE /BIC/OIZUPDSTAT,
*      InfoObject: ZMDSOURCE Master Data Source.
        /BIC/ZMDSOURCE           TYPE /BIC/OIZMDSOURCE,
*      Field: RECORD.
        RECORD           TYPE RSARECORD,
      END   OF _ty_s_SC_1.
    TYPES:
      _ty_t_SC_1        TYPE STANDARD TABLE OF _ty_s_SC_1
                        WITH NON-UNIQUE DEFAULT KEY.

*$*$ begin of global - insert your declaration only below this line  *-*
... "insert your code here
*$*$ end of global - insert your declaration only before this line   *-*

    METHODS
      start_routine
        IMPORTING
          request                  type rsrequest
          datapackid               type rsdatapid
          segid                    type rsbk_segid
        EXPORTING
          monitor                  type rstr_ty_t_monitors
        CHANGING
          SOURCE_PACKAGE              type _ty_t_SC_1
        RAISING
          cx_rsrout_abort
          cx_rsbk_errorcount.
    METHODS
      inverse_start_routine
        IMPORTING
          i_th_fields_outbound         TYPE rstran_t_field_inv
          I_R_SELSET_OUTBOUND          TYPE REF TO CL_RSMDS_SET
          i_is_main_selection          TYPE rs_bool
          i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
          i_r_universe_inbound         TYPE REF TO CL_RSMDS_UNIVERSE
        CHANGING
          c_th_fields_inbound          TYPE rstran_t_field_inv
          c_r_selset_inbound           TYPE REF TO CL_RSMDS_SET
          c_exact                      TYPE rs_bool.
ENDCLASS.                    "routine DEFINITION

*$*$ begin of 2nd part global - insert your code only below this line  *
... "insert your code here
*$*$ end of 2nd part global - insert your code only before this line   *

*---------------------------------------------------------------------*
*       CLASS routine IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_transform IMPLEMENTATION.

*----------------------------------------------------------------------*
*       Method start_routine
*----------------------------------------------------------------------*
*       Calculation of source package via start routine
*----------------------------------------------------------------------*
*   <-> source package
*----------------------------------------------------------------------*
  METHOD start_routine.
*=== Segments ===

    FIELD-SYMBOLS:
      <SOURCE_FIELDS>    TYPE _ty_s_SC_1.

    DATA:
      MONITOR_REC     TYPE rstmonitor.

*$*$ begin of routine - insert your code only below this line        *-*
... "insert your code here
*--  fill table "MONITOR" with values of structure "MONITOR_REC"
*-   to make monitor entries
... "to cancel the update process
*    raise exception type CX_RSROUT_ABORT.
*DATA: wa_append type _ty_s_SC_1.



*####################
*### Old formulas from before start routine
*IF( IS_INITIAL( /BIC/ZUPDSTAT ) OR /BIC/ZUPDSTAT = '0101', '0100',
*SKIP_RECORD( ) )

*L_TRIM( IF( IS_INITIAL( /BIC/ZSC_BT )
*, IF( IS_INITIAL( /BIC/ZSC_P ),
*R_TRIM( /BIC/ZSC_BA )
*, R_TRIM( /BIC/ZSC_P ) )
*, R_TRIM( /BIC/ZSC_BT ) )
*)
*####################

*####################
*### Dimensions in start routine
*/BIC/ZDERIV_01
*BILL_TYPE
*PLANT
*/BIC/ZFORG

*/BIC/ZSMETHOD

*/BIC/ZSC_BT
*/BIC/ZSC_P
*/BIC/ZSC_BA

*/BIC/ZUPDSTAT
*/BIC/ZMDSOURCE <-- DO NOT CHANGE!
*####################

.BREAK-POINT.

*--- Purpose:
*--- Derive Sales Channel based on logic where the assignment from
*--- Billing Type, Plant and Business Area is evaluated in turn.
*---
*--- Finally the status is set to '0100' which is derivation finished
*--- Only records with no status (#) which are new values, or
*--- records set for reevaluation ('0101') are considered
*---
*--- Status Types
*--- 0100 Derived
*--- 0101 Reevaluate on next pass
*--- 0110 manually "derived"

*### Only run for "To be updated" ('0101') or never updated ('#')
*records


*¤¤¤¤¤¤¤¤¤¤¤¤¤
* TEST AREA FOR PARAMETER VALUES
*Declare local table for PARAMS values
DATA: tblPARAMETERS TYPE STANDARD TABLE OF /BIC/APARAMS2.
DATA: Process_Scope TYPE /BIC/APARAMS2.
*DATA: PARAMETER TYPE /BIC/APARAMS2.

SELECT * INTO TABLE tblPARAMETERS FROM /BIC/APARAMS2 WHERE TT_PARAMETER
= 'ZDERIV_01'.

*Get Process Scope from the parameter table
READ TABLE tblPARAMETERS INTO Process_Scope
           WITH KEY TT_PARAMETER = 'ZDERIV_01'
                    TT_SUBPARAM  = 'PROCESS_SCOPE'.

*LOOP AT tblPARAMETERS INTO PARAMETER.
*do something
*  .BREAK-POINT.
*ENDLOOP.
*¤¤¤¤¤¤¤¤¤¤¤¤¤


IF Process_Scope-VALUEA = 'All'.
*Do nothing => Process all members
ELSEIF Process_Scope-VALUEA = 'Only-0100'.
  DELETE SOURCE_PACKAGE  WHERE /BIC/ZUPDSTAT NE '0100'.
ELSEIF Process_Scope-VALUEA = 'Only-0110'.
  DELETE SOURCE_PACKAGE  WHERE /BIC/ZUPDSTAT NE '0110'.
ELSE.
  DELETE SOURCE_PACKAGE  WHERE /BIC/ZUPDSTAT NE '0101' AND /BIC/ZUPDSTAT
  IS NOT INITIAL.
ENDIF.

*### Loop the remaining records to derive the sales channel
LOOP AT SOURCE_PACKAGE ASSIGNING <SOURCE_FIELDS>.

*IF <SOURCE_FIELDS>-/BIC/ZUPDSTAT NE '0101' AND
*<SOURCE_FIELDS>-/BIC/ZUPDSTAT IS NOT INITIAL.
*  DELETE SOURCE_PACKAGE.
*  CONTINUE.
*ENDIF.

*### Derive Sales Channel from
*### Billing Type --> Plant --> Business Area
  IF  <SOURCE_FIELDS>-/BIC/ZSC_BT IS NOT INITIAL.
    "# Billing Type
    <SOURCE_FIELDS>-/BIC/ZSMETHOD = <SOURCE_FIELDS>-/BIC/ZSC_BT.
  ELSEIF <SOURCE_FIELDS>-/BIC/ZSC_P IS NOT INITIAL.
    "# Plant
    <SOURCE_FIELDS>-/BIC/ZSMETHOD = <SOURCE_FIELDS>-/BIC/ZSC_P.
  ELSEIF <SOURCE_FIELDS>-/BIC/ZSC_BA IS NOT INITIAL.
    "# TT Business Area
    <SOURCE_FIELDS>-/BIC/ZSMETHOD = <SOURCE_FIELDS>-/BIC/ZSC_BA.
  ENDIF.

*### If sales is POS (in the store) and the sales is marked as B2B, then
*earmark it as POS_B2B
  IF <SOURCE_FIELDS>-/BIC/ZSC_BA = 'POS' AND
  <SOURCE_FIELDS>-/BIC/ZSMETHOD = 'B2B'.
    <SOURCE_FIELDS>-/BIC/ZSMETHOD = 'POSB2B'.

*Identify Return of WWW goods in Stores
  ELSEIF <SOURCE_FIELDS>-/BIC/ZSMETHOD = 'WWW' AND
         <SOURCE_FIELDS>-/BIC/ZSC_BA = 'POS' AND (
         <SOURCE_FIELDS>-BILL_TYPE = 'ZG2' OR <SOURCE_FIELDS>-BILL_TYPE
         =
  'ZCFR' ).
    <SOURCE_FIELDS>-/BIC/ZSMETHOD = 'WWWRTN'.   "Return of WWW in Store
  ENDIF.

*### Set the update status to Derived = '0100'
  <SOURCE_FIELDS>-/BIC/ZUPDSTAT = '0100'.

ENDLOOP.






*$*$ end of routine - insert your code only before this line         *-*
  ENDMETHOD.                    "start_routine
*----------------------------------------------------------------------*
*       Inverse method inverse_start_routine
*----------------------------------------------------------------------*
*       This subroutine needs to be implemented only for direct access
*       (for better performance) and for the Report/Report Interface
*       (drill through).
*       The inverse routine should transform a projection and
*       a selection for the target to a projection and a selection
*       for the source, respectively.
*       If the implementation remains empty all fields are filled and
*       all values are selected.
*----------------------------------------------------------------------*
*       Customer comment:
*----------------------------------------------------------------------*
  METHOD inverse_start_routine.

*   IMPORTING
*     i_r_selset_outbound          TYPE REF TO cl_rsmds_set
*     i_th_fields_outbound         TYPE HASHED TABLE
*     i_r_selset_outbound_complete TYPE REF TO cl_rsmds_set
*     i_r_universe_inbound         TYPE REF TO cl_rsmds_universe
*   CHANGING
*     c_r_selset_inbound           TYPE REF TO cl_rsmds_set
*     c_th_fields_inbound          TYPE HASHED TABLE
*     c_exact                      TYPE rs_bool

*$*$ begin of inverse routine - insert your code only below this line*-*
... "insert your code here
*$*$ end of inverse routine - insert your code only before this line *-*

  ENDMETHOD.                    "inverse_start_routine
ENDCLASS.                    "routine IMPLEMENTATION
